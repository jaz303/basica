/* Helpers */

_
    = [ \t]*

non_zero_digit
    = [1-9]

digit
    = [0-9]

float
    = $ ( non_zero_digit digit* '.' digit+ )

integer
    = $ ( non_zero_digit digit* )

TERM
	= _ "\n"

/* Productions */

Line
	= _ x:NumberedLine TERM { return x; }
	/ _ x:Statements TERM { return x; }

NumberedLine
	= line:integer _ stmts:Statements {
		return {
			line: parseInt(line, 10),
			statements: stmts.statements
		};
	}

Statements
	= head:Statement tail:(':' _ Statement)* {
		return {
			line: null,
			statements: [head].concat(tail.map(function(t) { return t[2]; }))
		};
	}

Statement
	= left:Ident _ '=' _ right:Expression _ {
		return { type: "assign", left: left, right: right };
	}
	/ name:CommandName _ args:ArgList? {
		return { type: "command", name: name, args: args || [] };
	}

VariableName
	= name:$( [a-zA-Z] [a-zA-Z0-9]* [$%]? ) {
		return name.toUpperCase();
	}

CommandName
	= name:$( [a-zA-Z] [a-zA-Z0-9]* ) {
		return name.toUpperCase();A
	}

ArgList
	= head:Expression _ tail:(',' _ Expression _)* {
		return [head].concat(tail.map(function(t) { return t[2]; }));
	}

FunctionArgs
	= '(' _ args:ArgList ')' _ { return args; }

Expression
	= Float
	/ Integer
	/ String
	/ Ident

Float
	= val:float { return parseFloat(val); }

Integer
	= val:integer { return parseInt(val, 10) }

String
	= '"' str:$( StringChar* ) '"' { return str; }

StringChar
	= '\\n' { return "\n"; }
	/ '\\t' { return "\t"; }
	/ '\\"' { return '"'; }
	/ '\\\\' { return "\\"; }
	/ [^\"]

Ident
	= name:VariableName {
		return { "type": "ident", name: name }
	}
